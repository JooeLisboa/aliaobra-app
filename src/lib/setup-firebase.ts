
import { execSync } from 'child_process';
import { writeFileSync, readFileSync } from 'fs';
import { resolve } from 'path';

// This script is meant to be run from the root of the project.
// It fetches Firebase configuration and populates the .env file.
// Usage: npx tsx src/lib/setup-firebase.ts

function setupFirebase() {
  console.log('Attempting to configure Firebase environment variables...');

  try {
    // Check for Firebase CLI login status
    console.log('Checking Firebase CLI login status...');
    execSync('firebase login:list', { stdio: 'pipe' });
    console.log('Firebase CLI is logged in.');
  } catch (error) {
    console.error('Error: You are not logged into the Firebase CLI.');
    console.error('Please run "firebase login" in your terminal and try again.');
    process.exit(1);
  }

  let projectId: string;
  try {
    // Get the current Firebase project ID
    console.log('Getting current Firebase project ID...');
    const useOutput = execSync('firebase use', { encoding: 'utf-8' }).trim();
     if (!useOutput || useOutput.includes('No active project')) {
        throw new Error("No active Firebase project is selected.");
    }
    const match = useOutput.match(/Active Project: ([\w-]+)/);
    if (match && match[1]) {
      projectId = match[1];
    } else {
      // Fallback for cases where the output is just the project ID
      projectId = useOutput.split('\n').pop()!.trim();
    }
    
    console.log(`Detected Firebase project: ${projectId}`);
  } catch (error) {
    console.error('Error: Could not determine the active Firebase project.');
    console.error('Please run "firebase use <your-project-id>" in your terminal and try again.');
    process.exit(1);
  }

  try {
    // List all apps to find a web app
    console.log(`Listing Firebase apps for project ${projectId}...`);
    const appsListOutput = execSync(`firebase apps:list --project ${projectId}`, { encoding: 'utf-8' });
    const webAppLine = appsListOutput.split('\n').find(line => line.includes(' WEB '));

    if (!webAppLine) {
        throw new Error('No WEB app found in the Firebase project. Please create one in the Firebase console.');
    }
    
    // Extract App ID from the table-like output by splitting and trimming
    const columns = webAppLine.split('│').map(col => col.trim());
    const webAppId = columns.length > 2 ? columns[1] : ''; // App ID is typically the second column

    if (!webAppId || !webAppId.includes(':web:')) {
        throw new Error(`Could not reliably extract the Web App ID. Parsed line: "${webAppLine}"`);
    }

    console.log(`Found Web App with ID: ${webAppId}`);

    // Get the web app config from Firebase using the specific App ID
    console.log(`Fetching Firebase web app configuration for App ID ${webAppId}...`);
    const configResult = execSync(`firebase apps:sdkconfig WEB ${webAppId} --project ${projectId}`, { encoding: 'utf-8' });
    
    const jsonMatch = configResult.match(/{\s*"firebase":\s*{[\s\S]*?}\s*}/);
    if (!jsonMatch) {
      throw new Error("Could not parse the Firebase config for the specified app.");
    }

    const firebaseConfig = JSON.parse(jsonMatch[0]).firebase;

    // Path to the .env file in the project root
    const envPath = resolve(process.cwd(), '.env');
    console.log(`Writing configuration to ${envPath}`);

    // Create the content for the .env file
    const envContent = [
      `# Firebase SDK configuration - Auto-generated by setup-firebase.ts`,
      `NEXT_PUBLIC_FIREBASE_API_KEY=${firebaseConfig.apiKey}`,
      `NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${firebaseConfig.authDomain}`,
      `NEXT_PUBLIC_FIREBASE_PROJECT_ID=${firebaseConfig.projectId}`,
      `NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${firebaseConfig.storageBucket}`,
      `NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${firebaseConfig.messagingSenderId}`,
      `NEXT_PUBLIC_FIREBASE_APP_ID=${firebaseConfig.appId}`,
      ``, // Add a newline for readability
      `# Stripe configuration`,
      `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=`,
    ].join('\n');
    
    writeFileSync(envPath, envContent);

    console.log('\n✅ Success! Firebase environment variables have been written to .env');
    console.log('Next steps:');
    console.log('1. Add your Stripe Publishable Key to the .env file.');
    console.log('2. Restart your development server for the changes to take effect.');
    
  } catch (error) {
    console.error('\n❌ An error occurred during Firebase setup:');
    console.error(error instanceof Error ? error.message : String(error));
    process.exit(1);
  }
}

setupFirebase();
